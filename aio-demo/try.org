#+begin_src haskell :compile yes :tangle hello.hs
  #!/usr/bin/env stack
  -- stack --resolver lts-20.0 script --package rio
  {-# LANGUAGE NoImplicitPrelude #-}
  {-# LANGUAGE OverloadedStrings #-}

  import RIO

  main :: IO ()
  main = runSimpleApp $ logInfo "Hello world!"
#+end_src

#+RESULTS:


#+begin_src haskell :compile yes :tangle rio.hs
  #!/usr/bin/env stack
  -- stack --resolver lts-20.0 script
  {-# LANGUAGE NoImplicitPrelude #-}
  import Prelude (putStrLn)
  import RIO

  type Name = String

  main :: IO ()
  main = do
    let name = "Alice"
    runRIO name $ do
      sayHello
      sayGoodbye

  sayHello :: RIO Name ()
  sayHello = do
    name <- ask
    liftIO $ putStrLn $ "hello, " ++ name

  sayGoodbye :: RIO Name ()
  sayGoodbye = do
    name <- ask
    liftIO $ putStrLn $ "Goodbye, " ++ name
#+end_src

#+begin_src haskell :tangle "rio2.hs" :tangle-mode (identity #o755)
  #!/usr/bin/env stack
  -- stack --resolver lts-20.0 script
  {-# LANGUAGE NoImplicitPrelude #-}
  import RIO
  import System.IO (hPutStrLn, stderr)

  data App = App
    { appName :: !String
    , appHandle :: !Handle
    }

  main :: IO ()
  main = do
    let app = App
          { appName = "Alice"
          , appHandle = stderr
          }
    runRIO app $ do
      sayHello
      sayGoodbye

  sayHello :: RIO App ()
  sayHello = do
    App name h <- ask
    liftIO $ hPutStrLn h $ "Hello, " ++ name


  sayGoodbye :: RIO App ()
  sayGoodbye = do
    App name h <- ask
    liftIO $ hPutStrLn h $ "Goodbye, " ++ name
#+end_src
